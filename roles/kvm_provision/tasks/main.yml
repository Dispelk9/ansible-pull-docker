---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - python3-pip
      - python3-lxml
      - python3-libvirt
      - ansible
      - git
      - qemu
      - qemu-kvm
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
      - bridge-utils
    state: present
  become: true

- name: Install Jinja2
  shell: pip3 install "Jinja2<3.1"
- name: Install community.libvirt
  shell: ansible-galaxy collection install community.libvirt

- name: Include vars of kvm_provision
  include_vars:
    file: default/main.yml
   
- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no
- name: Create VM if not exists
  block:
      - name: Download base image
        get_url:
          #url: "{{ base_image_url }}"
          url:  https://cloud-images.ubuntu.com/releases/bionic/release/ubuntu-18.04-server-cloudimg-amd64.img
          #dest: "/tmp/{{ base_image_name }}"
          dest: /tmp/ubuntu-18.04-server-cloudimg-amd64.img
          #checksum: "sha256:{{ base_image_sha }}"
      - name: Copy base image to libvirt directory
        copy:
          src: /tmp/ubuntu-18.04-server-cloudimg-amd64.img
          dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
          #src: "/tmp/{{ base_image_name }}"
          force: no
          remote_src: yes 
          mode: 0660
        #register: copy_results
      # - name: Configure the image
      #   command: |
      #     virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
      #     --hostname {{ vm_name }} \
      #     --root-password password:{{ vm_root_pass }} \
      #     --ssh-inject 'root:file:{{ ssh_key }}' \
      #     --uninstall cloud-init --selinux-relabel
      - name: Configure the image
        command: |
          virt-install --name {{ vm_name }} \
          --virt-type kvm --memory {{ vm_ram_mb }}  --vcpus {{ vm_vcpus }} \
          --boot hd,menu=on \
          --disk path={{ libvirt_pool_dir }}/{{ vm_name }}.qcow2,device=disk \
          --graphics none
        #when: copy_results is changed
      - name: Define vm
        community.libvirt.virt:
          command: define
          xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: /tmp/ubuntu-18.04-server-cloudimg-amd64.img
    #path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | bool