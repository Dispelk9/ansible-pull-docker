---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - python3-pip
      - python3-lxml
      - python3-libvirt
      - ansible
      - git
      - qemu
      - qemu-kvm
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
      - bridge-utils
    state: present
  become: true

# - name: Install Jinja2
#   shell: pip3 install "Jinja2<3.1"
- name: Install community.libvirt
  shell: ansible-galaxy collection install community.libvirt

- name: Install packages
  apt:
    package:
    - cloud-image-utils

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  block:
      - name: Download base image
        get_url:
          url: "{{ base_image_url }}"
          dest: "/tmp/{{ base_image_name }}"
          #checksum: "sha256:{{ base_image_sha }}"
      - name: Copy base image to libvirt directory
        copy:
          src: "/tmp/{{ base_image_name }}"
          dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
          force: no
          remote_src: yes 
          mode: 0660
      - name: Copy login info to tmp directory
        template:
          src: templates/login.txt
          dest: /tmp/login.txt
          force: no
          remote_src: yes 
          mode: 0660
      - name: Converting login info to disk image
        shell: cloud-localds /tmp/login.img /tmp/login.txt
      - name: Copy login.img info from tmp directory
        copy:
          src: /tmp/login.img
          dest: "{{ libvirt_pool_dir }}/login.img"
          force: no
          remote_src: yes 
          mode: 0660
      - name: Configure the image
        command: |
          virt-install --name {{ vm_name }} \
          --virt-type kvm --memory {{ vm_ram_mb }}  --vcpus {{ vm_vcpus }} \
          --boot hd,menu=on \
          --disk path={{ libvirt_pool_dir }}/{{ vm_name }}.qcow2,device=disk \
          --disk path={{ libvirt_pool_dir }}/login.img,format=raw \
          --graphics none \
          --os-variant ubuntu18.04
      # - name: Define vm
      #   community.libvirt.virt:
      #     command: define
      #     xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: /tmp/{{ base_image_name }}
    state: absent
  when: cleanup_tmp | bool

- name: Ensure temporary login is deleted
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - /tmp/login.img
    - /tmp/login.txt